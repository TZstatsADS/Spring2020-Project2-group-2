re <- apply(dist, 1, which.min)
return(re)
}
f.within_var <- function(dt, idx, center){
re <- 0
K <- length(unique(idx))
for(i in 1:K){
tmp_dt <- dt[idx == i, ]
tmp_n <- nrow(tmp_dt)
for(j in 1:tmp_n){
varc <- sum((tmp_dt[i,] - center[i])^2)
}
re <- re + varc
}
return(re)
}
KMeans_clustering <- function(data, K){
p <- ncol(data)
n <- nrow(data)
frst_idx <- sample(1:n, K)
K_centers <- data[frst_idx,]
idx <- rep(NA, n)
for(i in 1:n){
idx[i] <- f.simple_clus(data[i,], K_centers)
}
j <- 1
while(j <= 4){
K_centers <- matrix(NA, K, p)
# compute the clustering center
for(i in 1:K){
K_centers[i, ] <- colMeans(data[idx == i,])
}
# re-classify the observations
for(i in 1:n){
idx[i] <- f.simple_clus(data[i,], K_centers)
}
j = j+1
}
re_centroids <- K_centers
re_within.var <- f.within_var(data, idx, K_centers)
re_clusters <- idx
return(list(centroids = re_centroids,
within.var = re_within.var,
clusters = re_clusters))
}
data <- read.csv("/Users/ruozhou_zhang/Documents/statistic_S02/GR5241 Machine Learning/HW02/P5ClusterData.csv")
myclus.3 <- KMeans_clustering(data, 3)
# 优化算法-初始化中心点
f.dis <- function(x,y){
return(sqrt(sum((x - y)^2)))
}
f.simple_clus <- function(x, center){
dist <- apply(center, 1, function(x) apply(x, 1, f.dis, y = x))
re <- apply(dist, 1, which.min)
return(re)
}
f.within_var <- function(dt, idx, center){
re <- 0
K <- length(unique(idx))
for(i in 1:K){
tmp_dt <- dt[idx == i, ]
tmp_n <- nrow(tmp_dt)
for(j in 1:tmp_n){
varc <- sum((tmp_dt[i,] - center[i])^2)
}
re <- re + varc
}
return(re)
}
KMeans_clustering <- function(data, K){
p <- ncol(data)
n <- nrow(data)
frst_idx <- sample(1:n, K)
K_centers <- data[frst_idx,]
idx <- rep(NA, n)
for(i in 1:n){
idx[i] <- f.simple_clus(data, K_centers)
}
j <- 1
while(j <= 4){
K_centers <- matrix(NA, K, p)
# compute the clustering center
for(i in 1:K){
K_centers[i, ] <- colMeans(data[idx == i,])
}
# re-classify the observations
for(i in 1:n){
idx[i] <- f.simple_clus(data[i,], K_centers)
}
j = j+1
}
re_centroids <- K_centers
re_within.var <- f.within_var(data, idx, K_centers)
re_clusters <- idx
return(list(centroids = re_centroids,
within.var = re_within.var,
clusters = re_clusters))
}
myclus.3 <- KMeans_clustering(data, 3)
# 优化算法-初始化中心点
f.dis <- function(x,y){
return(sqrt(sum((x - y)^2)))
}
f.simple_clus <- function(x, center){
dim <- nrow(center)
euc_dits <- c()
for(i in 1:dim){
tmp <- f.dis(x, center[i,])
euc_dits <- c(euc_dits, tmp)
}
return(which.min(euc_dits))
}
f.cluster <- function(center, data){
distances <- apply(center, 1, function(x) apply(data, 1, f.dist, x2=x))
apply(distances, 1, which.min)
}
f.within_var <- function(dt, idx, center){
re <- 0
K <- length(unique(idx))
for(i in 1:K){
tmp_dt <- dt[idx == i, ]
tmp_n <- nrow(tmp_dt)
for(j in 1:tmp_n){
varc <- sum((tmp_dt[i,] - center[i])^2)
}
re <- re + varc
}
return(re)
}
KMeans_clustering <- function(data, K){
p <- ncol(data)
n <- nrow(data)
frst_idx <- sample(1:n, K)
K_centers <- data[frst_idx,]
idx <- rep(NA, n)
for(i in 1:n){
idx[i] <- f.simple_clus(data[i,], K_centers)
}
j <- 1
while(j <= 4){
K_centers <- matrix(NA, K, p)
# compute the clustering center
for(i in 1:K){
K_centers[i, ] <- colMeans(data[idx == i,])
}
# re-classify the observations
for(i in 1:n){
idx[i] <- f.simple_clus(data[i,], K_centers)
}
j = j+1
}
re_centroids <- K_centers
re_within.var <- f.within_var(data, idx, K_centers)
re_clusters <- idx
return(list(centroids = re_centroids,
within.var = re_within.var,
clusters = re_clusters))
}
myclus.3 <- KMeans_clustering(data, 3)
f.dis <- function(x,x_c){
return(sqrt(sum((x - x_c)^2)))
}
f.simple_clus <- function(dt, center){
dist <- apply(center, 1, function(x) apply(dt, 1, f.dis, x_c = x))
apply(distances, 1, which.min)
}
f.dis <- function(x,x_c){
return(sqrt(sum((x - x_c)^2)))
}
f.simple_clus <- function(dt, center){
dist <- apply(center, 1, function(x) apply(dt, 1, f.dis, x_c = x))
re <- apply(distances, 1, which.min)
return(re)
}
f.single_clus <- function(dt, center){
new_clus <- f.simple_clus(dt, center)
dt_new <- cbind(dt, clus = center)
center_new <- aggregate(dt_new[, -1], list(dt_new$clus), mean)[, -1]
return(list("centroids" = center_new,
"clusters" = new_clus))
}
KMeans_clustering <- function(data, K){
n <- nrow(data)
frst_idx <- sample(1:n, K)
K_centers <- data[frst_idx,]
for(i in 1:max.iteration){
curr_center <- K_centers
curr_clus_result <- f.single_clus(data, curr_center)
K_centers <- curr_clus_result$centroids
change_cent <- f.dis(curr_center, K_centers)
if(change_cent < 0.01){
break
}
}
print(curr_clus_result$clusters)
}
myclus.3 <- KMeans_clustering(data, 3)
f.dis <- function(x,x_c){
return(sqrt(sum((x - x_c)^2)))
}
f.simple_clus <- function(dt, center){
dist <- apply(center, 1, function(x) apply(dt, 1, f.dis, x_c = x))
re <- apply(distances, 1, which.min)
return(re)
}
f.single_clus <- function(dt, center){
new_clus <- f.simple_clus(dt, center)
dt_new <- cbind(dt, clus = center)
center_new <- aggregate(dt_new[, -1], list(dt_new$clus), mean)[, -1]
return(list("centroids" = center_new,
"clusters" = new_clus))
}
KMeans_clustering <- function(data, K, max.iteration = 100){
n <- nrow(data)
frst_idx <- sample(1:n, K)
K_centers <- data[frst_idx,]
for(i in 1:max.iteration){
curr_center <- K_centers
curr_clus_result <- f.single_clus(data, curr_center)
K_centers <- curr_clus_result$centroids
change_cent <- f.dis(curr_center, K_centers)
if(change_cent < 0.01){
break
}
}
print(curr_clus_result$clusters)
}
myclus.3 <- KMeans_clustering(data, 3)
f.dis <- function(x,x_c){
return(sqrt(sum((x - x_c)^2)))
}
f.simple_clus <- function(dt, center){
dist <- apply(center, 1, function(x) apply(dt, 1, f.dis, x_c = x))
re <- apply(dist, 1, which.min)
return(re)
}
f.single_clus <- function(dt, center){
new_clus <- f.simple_clus(dt, center)
dt_new <- cbind(dt, clus = center)
center_new <- aggregate(dt_new[, -1], list(dt_new$clus), mean)[, -1]
return(list("centroids" = center_new,
"clusters" = new_clus))
}
KMeans_clustering <- function(data, K, max.iteration = 100){
n <- nrow(data)
frst_idx <- sample(1:n, K)
K_centers <- data[frst_idx,]
for(i in 1:max.iteration){
curr_center <- K_centers
curr_clus_result <- f.single_clus(data, curr_center)
K_centers <- curr_clus_result$centroids
change_cent <- f.dis(curr_center, K_centers)
if(change_cent < 0.01){
break
}
}
print(curr_clus_result$clusters)
}
myclus.3 <- KMeans_clustering(data, 3)
f.dis <- function(x,x_c){
return(sqrt(sum((x - x_c)^2)))
}
f.simple_clus <- function(dt, center){
dist <- apply(center, 1, function(x) apply(dt, 1, f.dis, x_c = x))
re <- apply(dist, 1, which.min)
return(re)
}
f.single_clus <- function(dt, center){
new_clus <- f.simple_clus(dt, center)
dt_new <- cbind(dt, clus = new_clus)
center_new <- aggregate(dt_new[, -1], list(dt_new$clus), mean)[, -1]
return(list("centroids" = center_new,
"clusters" = new_clus))
}
KMeans_clustering <- function(data, K, max.iteration = 100){
n <- nrow(data)
frst_idx <- sample(1:n, K)
K_centers <- data[frst_idx,]
for(i in 1:max.iteration){
curr_center <- K_centers
curr_clus_result <- f.single_clus(data, curr_center)
K_centers <- curr_clus_result$centroids
change_cent <- f.dis(curr_center, K_centers)
if(change_cent < 0.01){
break
}
}
print(curr_clus_result$clusters)
}
myclus.3 <- KMeans_clustering(data, 3)
f.dis <- function(x,y){
return(sqrt(sum((x - y)^2)))
}
f.simple_clus <- function(dt, center){
dist <- apply(center, 1, function(x) apply(dt, 1, f.dis, y = x))
re <- apply(dist, 1, which.min)
return(re)
}
f.single_clus <- function(dt, center){
new_clus <- f.simple_clus(dt, center)
dt_new <- cbind(dt, clus = new_clus)
center_new <- aggregate(dt_new[, -1], list(dt_new$clus), mean)[, -1]
return(list("centroids" = center_new,
"clusters" = new_clus))
}
KMeans_clustering <- function(data, K, max.iteration = 100){
n <- nrow(data)
frst_idx <- sample(1:n, K)
K_centers <- data[frst_idx,]
for(i in 1:max.iteration){
curr_center <- K_centers
curr_clus_result <- f.single_clus(data, curr_center)
K_centers <- curr_clus_result$centroids
change_cent <- f.dis(curr_center, K_centers)
if(change_cent < 0.01){
break
}
}
print(curr_clus_result$clusters)
}
myclus.3 <- KMeans_clustering(data, 3)
f.dis <- function(x,y){
return(sqrt(sum((x - y)^2)))
}
f.simple_clus <- function(dt, center){
dist <- apply(center, 1, function(x) apply(dt, 1, f.dis, y = x))
re <- apply(dist, 1, which.min)
return(re)
}
f.single_clus <- function(dt, center){
new_clus <- f.simple_clus(dt, center)
dt_new <- cbind(dt, clus = new_clus)
center_new <- aggregate(dt_new[, -1], list(dt_new$clus), mean)[, -1]
return(list("centroids" = center_new,
"clusters" = new_clus))
}
KMeans_clustering <- function(data, K, max.iteration = 100){
n <- nrow(data)
frst_idx <- sample(1:n, K)
K_centers <- data[frst_idx,]
for(i in 1:max.iteration){
curr_center <- K_centers
curr_clus_result <- f.single_clus(data, curr_center)
K_centers <- curr_clus_result$centroids
change_cent <- f.dis(curr_center, K_centers)
if(change_cent < 0.01){
break
}
}
print(curr_clus_result$clusters)
}
myclus.3 <- KMeans_clustering(data, 3)
f.single_clus <- function(dt, center){
new_clus <- f.simple_clus(dt, center)
dt_new <- cbind(dt, clus = new_clus)
center_new <- aggregate(dt_new[, -1], list(dt_new$clus), mean)[, -1]
return(list("centroids" = center_new,
"clusters" = new_clus))
}
f.dis <- function(x,y){
return(sqrt(sum((x - y)^2)))
}
f.simple_clus <- function(dt, center){
dist <- apply(center, 1, function(x) apply(dt, 1, f.dis, y = x))
re <- apply(dist, 1, which.min)
return(re)
}
f.single_clus <- function(dt, center){
new_clus <- f.simple_clus(dt, center)
dt_new <- cbind(dt, clus = new_clus)
center_new <- aggregate(dt_new[, -1], list(dt_new$clus), mean)[, -1]
return(list("centroids" = center_new,
"clusters" = new_clus))
}
KMeans_clustering <- function(data, K, max.iteration = 100){
n <- nrow(data)
frst_idx <- sample(1:n, K)
K_centers <- data[frst_idx,]
for(i in 1:max.iteration){
curr_center <- K_centers
curr_clus_result <- f.single_clus(data, curr_center)
K_centers <- curr_clus_result$centroids
print(K_centers)
change_cent <- f.dis(curr_center, K_centers)
if(change_cent < 0.01){
break
}
}
print(curr_clus_result$clusters)
}
myclus.3 <- KMeans_clustering(data, 3)
# 优化算法-初始化中心点
f.dis <- function(x,y){
return(sqrt(sum((x - y)^2)))
}
f.simple_clus <- function(x, center){
dim <- nrow(center)
euc_dits <- c()
for(i in 1:dim){
tmp <- f.dis(x, center[i,])
euc_dits <- c(euc_dits, tmp)
}
return(which.min(euc_dits))
}
f.within_var <- function(dt, idx, center){
re <- 0
K <- length(unique(idx))
for(i in 1:K){
tmp_dt <- dt[idx == i, ]
tmp_n <- nrow(tmp_dt)
for(j in 1:tmp_n){
varc <- sum((tmp_dt[i,] - center[i])^2)
}
re <- re + varc
}
return(re)
}
KMeans_clustering <- function(data, K){
p <- ncol(data)
n <- nrow(data)
frst_idx <- sample(1:n, K)
K_centers <- data[frst_idx,]
idx <- rep(NA, n)
for(i in 1:n){
idx[i] <- f.simple_clus(data[i,], K_centers)
}
j <- 1
while(j <= 4){
K_centers <- matrix(NA, K, p)
# compute the clustering center
for(i in 1:K){
K_centers[i, ] <- colMeans(data[idx == i,])
}
# re-classify the observations
for(i in 1:n){
idx[i] <- f.simple_clus(data[i,], K_centers)
}
j = j+1
}
re_centroids <- K_centers
re_within.var <- f.within_var(data, idx, K_centers)
re_clusters <- idx
return(list(centroids = re_centroids,
within.var = re_within.var,
clusters = re_clusters))
}
myclus.3 <- KMeans_clustering(data, 3)
myclus.3$clusters
table(myclus.3$clusters)
clus.3 <- kmeans(data, 3)
clus.3$size
table(myclus.3$clusters)
myclus.3$centroids
myclus.3$within.var
clus.3$tot.withinss
clus.3$withinss
install.packages('BatchGetSymbols')
df.SP500 <- GetSP500Stocks()
?GetSP500Stocks
??GetSP500Stocks
library(BatchGetSymbols)
start <- "2019-01-01"
end <- "2020-01-01"
df.SP500 <- GetSP500Stocks()
tickers <- df.SP500$Tickers
tickers <- sample(df.SP500$Tickers, 30)
my_30stocks <- BatchGetSymbols(tickers = tickers,
first.date = first.date,
last.date = last.date)
my_30stocks <- BatchGetSymbols(tickers = tickers,
first.date = start,
last.date = end)
View(my_30stocks)
my_30stocks$df.tickers
data <- my_30stocks$df.tickers %>%
select(ticker, ref.date, price.close)
dt.stock <- my_30stocks$df.tickers %>%
select(ticker, ref.date, price.close)
data <- read.csv("/Users/ruozhou_zhang/Documents/statistic_S02/GR5241 Machine Learning/HW02/P5ClusterData.csv")
dt.stock <- my_30stocks$df.tickers %>%
select(ticker, ref.date, price.close)
View(dt.stock)
library(tidyverse)
?pivot_wider
??pivot_wider
?spread
detach("package:tidyr", unload = TRUE)
library(tidyr)
install.packages("tidyverse")
?spread
dt.stock <- dt.stock %>%
spread(key = ticker, value = price.close)
dt.stock <- my_30stocks$df.tickers %>%
select(ticker, ref.date, price.close) %>%
spread(key = ticker, value = price.close)
dim(dt.stock)
dt.stock <- my_30stocks$df.tickers %>%
select(ticker, ref.date, price.close) %>%
spread(key = ticker, value = price.close) %>%
select(-ref.date)
dim(dt.stock)
pca <- prcomp(dt.stock)
pca.re <- prcomp(dt.stock)
rm(pca)
?biplot
biplot(pca.re)
scaled.dt <- scale(dt.stock, center=TRUE, scale=TRUE)
pca.scaled <- prcomp(scaled.dt)
biplot(pca.scaled)
shiny::runApp()
runApp()
runApp()
