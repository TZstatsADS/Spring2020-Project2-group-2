return(re)
}
KMeans_clustering <- function(data, K){
p <- ncol(data)
n <- nrow(data)
idx <- simple_ra(n, num_arms = K, conditions = 1:K)
change_rate = 1
while(TRUE){
last_idx <- idx
K_centers <- matrix(NA, K, p)
# compute the clustering center
for(i in 1:K){
K_centers[i, ] <- colMeans(data[idx == i,])
}
if(change_rate <= 0.3){
re_centroids <- K_centers
re_within.var <- f.within_var(data, idx, K_centers)
re_clusters <- idx
break
}
# re-classify the observations
for(i in 1:n){
idx[i] <- f.simple_clus(data[i,], K_centers)
}
# calculate the change rate
change_rate <- sum(last_idx == idx) / length(idx)
}
return(list(re_centroids, re_clusters))
}
f.dis <- function(x,y){
return(sqrt(sum((x - y)^2)))
}
f.simple_clus <- function(x, center){
dim <- nrow(center)
euc_dits <- c()
for(i in 1:dim){
tmp <- f.dis(x, center[i,])
euc_dits <- c(euc_dits, tmp)
}
return(which.min(euc_dits))
}
f.within_var <- function(dt, idx, center){
re <- 0
K <- length(unique(idx))
for(i in 1:K){
tmp_dt <- dt[idx == i, ]
tmp_n <- nrow(tmp_dt)
for(j in 1:tmp_n){
varc <- sum((tmp_dt[i,] - center[i])^2)
}
re <- re + varc
}
return(re)
}
KMeans_clustering <- function(data, K){
p <- ncol(data)
n <- nrow(data)
idx <- simple_ra(n, num_arms = K, conditions = 1:K)
change_rate = 1
while(TRUE){
last_idx <- idx
K_centers <- matrix(NA, K, p)
# compute the clustering center
for(i in 1:K){
K_centers[i, ] <- colMeans(data[idx == i,])
}
if(change_rate <= 0.2){
re_centroids <- K_centers
re_within.var <- f.within_var(data, idx, K_centers)
re_clusters <- idx
break
}
# re-classify the observations
for(i in 1:n){
idx[i] <- f.simple_clus(data[i,], K_centers)
}
# calculate the change rate
change_rate <- sum(last_idx == idx) / length(idx)
}
return(list(re_centroids, re_clusters))
}
a <- KMeans_clustering(data, 5)
a <- KMeans_clustering(data, 5)
f.dis <- function(x,y){
return(sqrt(sum((x - y)^2)))
}
f.simple_clus <- function(x, center){
dim <- nrow(center)
euc_dits <- c()
for(i in 1:dim){
tmp <- f.dis(x, center[i,])
euc_dits <- c(euc_dits, tmp)
}
return(which.min(euc_dits))
}
f.within_var <- function(dt, idx, center){
re <- 0
K <- length(unique(idx))
for(i in 1:K){
tmp_dt <- dt[idx == i, ]
tmp_n <- nrow(tmp_dt)
for(j in 1:tmp_n){
varc <- sum((tmp_dt[i,] - center[i])^2)
}
re <- re + varc
}
return(re)
}
KMeans_clustering <- function(data, K){
p <- ncol(data)
n <- nrow(data)
idx <- simple_ra(n, num_arms = K, conditions = 1:K)
change_rate = 1
while(TRUE){
last_idx <- idx
K_centers <- matrix(NA, K, p)
# compute the clustering center
for(i in 1:K){
K_centers[i, ] <- colMeans(data[idx == i,])
}
if(change_rate <= 0.3){
re_centroids <- K_centers
re_within.var <- f.within_var(data, idx, K_centers)
re_clusters <- idx
break
}
# re-classify the observations
for(i in 1:n){
idx[i] <- f.simple_clus(data[i,], K_centers)
}
# calculate the change rate
change_rate <- sum(last_idx != idx) / length(idx)
}
return(list(re_centroids, re_clusters))
}
a <- KMeans_clustering(data, 5)
a[2]
table(a[2])
f.dis <- function(x,y){
return(sqrt(sum((x - y)^2)))
}
f.simple_clus <- function(x, center){
dim <- nrow(center)
euc_dits <- c()
for(i in 1:dim){
tmp <- f.dis(x, center[i,])
euc_dits <- c(euc_dits, tmp)
}
return(which.min(euc_dits))
}
f.within_var <- function(dt, idx, center){
re <- 0
K <- length(unique(idx))
for(i in 1:K){
tmp_dt <- dt[idx == i, ]
tmp_n <- nrow(tmp_dt)
for(j in 1:tmp_n){
varc <- sum((tmp_dt[i,] - center[i])^2)
}
re <- re + varc
}
return(re)
}
KMeans_clustering <- function(data, K){
p <- ncol(data)
n <- nrow(data)
idx <- simple_ra(n, num_arms = K, conditions = 1:K)
change_rate = 1
while(TRUE){
last_idx <- idx
K_centers <- matrix(NA, K, p)
# compute the clustering center
for(i in 1:K){
K_centers[i, ] <- colMeans(data[idx == i,])
}
if(change_rate <= 0.3){
re_centroids <- K_centers
re_within.var <- f.within_var(data, idx, K_centers)
re_clusters <- idx
break
}
# re-classify the observations
for(i in 1:n){
idx[i] <- f.simple_clus(data[i,], K_centers)
}
# calculate the change rate
change_rate <- sum(last_idx != idx) / length(idx)
}
return(list(centroids = re_centroids,
within.var = re_within.var
clusters = re_clusters))
f.dis <- function(x,y){
return(sqrt(sum((x - y)^2)))
}
f.simple_clus <- function(x, center){
dim <- nrow(center)
euc_dits <- c()
for(i in 1:dim){
tmp <- f.dis(x, center[i,])
euc_dits <- c(euc_dits, tmp)
}
return(which.min(euc_dits))
}
f.within_var <- function(dt, idx, center){
re <- 0
K <- length(unique(idx))
for(i in 1:K){
tmp_dt <- dt[idx == i, ]
tmp_n <- nrow(tmp_dt)
for(j in 1:tmp_n){
varc <- sum((tmp_dt[i,] - center[i])^2)
}
re <- re + varc
}
return(re)
}
KMeans_clustering <- function(data, K){
p <- ncol(data)
n <- nrow(data)
idx <- simple_ra(n, num_arms = K, conditions = 1:K)
change_rate = 1
while(TRUE){
last_idx <- idx
K_centers <- matrix(NA, K, p)
# compute the clustering center
for(i in 1:K){
K_centers[i, ] <- colMeans(data[idx == i,])
}
if(change_rate <= 0.3){
re_centroids <- K_centers
re_within.var <- f.within_var(data, idx, K_centers)
re_clusters <- idx
break
}
# re-classify the observations
for(i in 1:n){
idx[i] <- f.simple_clus(data[i,], K_centers)
}
# calculate the change rate
change_rate <- sum(last_idx != idx) / length(idx)
}
return(list(centroids = re_centroids,
within.var = re_within.var,
clusters = re_clusters))
}
a <- KMeans_clustering(data, 5)
table(a$clusters)
kmeans(data)
myclus.3 <- KMeans_clustering(data, 3)
myclus.4 <- KMeans_clustering(data, 4)
myclus.5 <- KMeans_clustering(data, 5)
library(quantmod)
install.packages("quantmod")
library(quantmod)
data <- getSymbols("AAPL", auto.assign = F, from ="2019-01-01", to = "2020-01-01")
data <- read.csv("/Users/ruozhou_zhang/Documents/statistic_S02/GR5241 Machine Learning/HW02/P5ClusterData.csv")
dt.quant<- getSymbols("AAPL", auto.assign = F, from ="2019-01-01", to = "2020-01-01")
library(quantmod)
dt.quant<- getSymbols("AAPL", auto.assign = F, from ="2019-01-01", to = "2020-01-01")
dt.quant <- getSymbols("AAPL", auto.assign = F, from ="2019-01-01", to = "2020-01-01")
View(dt.quant)
table(myclus.3$clusters)
f.dis <- function(x,y){
return(sqrt(sum((x - y)^2)))
}
f.simple_clus <- function(x, center){
dim <- nrow(center)
euc_dits <- c()
for(i in 1:dim){
tmp <- f.dis(x, center[i,])
euc_dits <- c(euc_dits, tmp)
}
return(which.min(euc_dits))
}
f.within_var <- function(dt, idx, center){
re <- 0
K <- length(unique(idx))
for(i in 1:K){
tmp_dt <- dt[idx == i, ]
tmp_n <- nrow(tmp_dt)
for(j in 1:tmp_n){
varc <- sum((tmp_dt[i,] - center[i])^2)
}
re <- re + varc
}
return(re)
}
KMeans_clustering <- function(data, K){
p <- ncol(data)
n <- nrow(data)
idx <- simple_ra(n, num_arms = K, conditions = 1:K)
j = 0
while(j <= 5){
last_idx <- idx
K_centers <- matrix(NA, K, p)
# compute the clustering center
for(i in 1:K){
K_centers[i, ] <- colMeans(data[idx == i,])
}
# re-classify the observations
for(i in 1:n){
idx[i] <- f.simple_clus(data[i,], K_centers)
}
j = j+1
}
re_centroids <- K_centers
re_within.var <- f.within_var(data, idx, K_centers)
re_clusters <- idx
return(list(centroids = re_centroids,
within.var = re_within.var,
clusters = re_clusters))
}
myclus.3 <- KMeans_clustering(data, 3)
f.dis <- function(x,y){
return(sqrt(sum((x - y)^2)))
}
f.simple_clus <- function(x, center){
dim <- nrow(center)
euc_dits <- c()
for(i in 1:dim){
tmp <- f.dis(x, center[i,])
euc_dits <- c(euc_dits, tmp)
}
return(which.min(euc_dits))
}
f.within_var <- function(dt, idx, center){
re <- 0
K <- length(unique(idx))
for(i in 1:K){
tmp_dt <- dt[idx == i, ]
tmp_n <- nrow(tmp_dt)
for(j in 1:tmp_n){
varc <- sum((tmp_dt[i,] - center[i])^2)
}
re <- re + varc
}
return(re)
}
KMeans_clustering <- function(data, K){
p <- ncol(data)
n <- nrow(data)
idx <- simple_ra(n, num_arms = K, conditions = 1:K)
j = 0
while(j <= 5){
K_centers <- matrix(NA, K, p)
# compute the clustering center
for(i in 1:K){
K_centers[i, ] <- colMeans(data[idx == i,])
}
# re-classify the observations
for(i in 1:n){
idx[i] <- f.simple_clus(data[i,], K_centers)
}
j = j+1
print(j)
}
re_centroids <- K_centers
re_within.var <- f.within_var(data, idx, K_centers)
re_clusters <- idx
return(list(centroids = re_centroids,
within.var = re_within.var,
clusters = re_clusters))
}
myclus.3 <- KMeans_clustering(data, 3)
table(myclus.3$clusters)
kmeans(data,4)$size
kmeans(data,3)$size
myclus.4 <- KMeans_clustering(data, 4)
myclus.5 <- KMeans_clustering(data, 5)
table(myclus.4$clusters)
kmeans(data, 4)
table(myclus.4$clusters)
kmeans(data, 4)$size
myclus.3 <- KMeans_clustering(data, 3)
myclus.4 <- KMeans_clustering(data, 4)
myclus.5 <- KMeans_clustering(data, 5)
clus.3 <- kmeans(data, 3)
clus.4 <- kmeans(data, 4)
clus.5 <- kmeans(data, 5)
rm(a)
View(dt.quant)
View(dt.quant)
frst_idx <- sample(1:n, K)
p <- ncol(data)
n <- nrow(data)
frst_idx <- sample(1:n, K)
K = 5
frst_idx <- sample(1:n, K)
K_centers <- data[frst_idx,]
View(K_centers)
idx <- rep(NA, n)
for(i in 1:n){
idx[i] <- f.simple_clus(data[i,], K_centers)
}
unique(idx)
table(idx)
# 优化算法-初始化中心点
f.dis <- function(x,y){
return(sqrt(sum((x - y)^2)))
}
f.simple_clus <- function(x, center){
dim <- nrow(center)
euc_dits <- c()
for(i in 1:dim){
tmp <- f.dis(x, center[i,])
euc_dits <- c(euc_dits, tmp)
}
return(which.min(euc_dits))
}
f.within_var <- function(dt, idx, center){
re <- 0
K <- length(unique(idx))
for(i in 1:K){
tmp_dt <- dt[idx == i, ]
tmp_n <- nrow(tmp_dt)
for(j in 1:tmp_n){
varc <- sum((tmp_dt[i,] - center[i])^2)
}
re <- re + varc
}
return(re)
}
KMeans_clustering <- function(data, K){
p <- ncol(data)
n <- nrow(data)
frst_idx <- sample(1:n, K)
K_centers <- data[frst_idx,]
idx <- rep(NA, n)
for(i in 1:n){
idx[i] <- f.simple_clus(data[i,], K_centers)
}
j <- 1
while(j <= 4){
K_centers <- matrix(NA, K, p)
# compute the clustering center
for(i in 1:K){
K_centers[i, ] <- colMeans(data[idx == i,])
}
# re-classify the observations
for(i in 1:n){
idx[i] <- f.simple_clus(data[i,], K_centers)
}
j = j+1
}
re_centroids <- K_centers
re_within.var <- f.within_var(data, idx, K_centers)
re_clusters <- idx
return(list(centroids = re_centroids,
within.var = re_within.var,
clusters = re_clusters))
}
myclus.3 <- KMeans_clustering(data, 3)
clus.3 <- kmeans(data, 3)
table(myclus.3$clusters)
table(clus.3$cluster)
clus.3$size
clus.3 <- kmeans(data, 3)
clus.3$size
kmeans(data, 3)$size
kmeans(data, 3)$size
kmeans(data, 3)$size
kmeans(data, 3)$size
runApp('~/Documents/statistic_S02/GR5243_Applied_Data_Science/Spring2020-Project2-group-2/app.page1.Ruozhou')
runApp('~/Documents/statistic_S02/GR5243_Applied_Data_Science/Spring2020-Project2-group-2/app.page1.Ruozhou')
?awesomeIcons()
runApp('~/Documents/statistic_S02/GR5243_Applied_Data_Science/Spring2020-Project2-group-2/app.page1.Ruozhou')
runApp('~/Documents/statistic_S02/GR5243_Applied_Data_Science/Spring2020-Project2-group-2/app.page1.Ruozhou')
runApp('~/Documents/statistic_S02/GR5243_Applied_Data_Science/Spring2020-Project2-group-2/app.page1.Ruozhou')
runApp('~/Documents/statistic_S02/GR5243_Applied_Data_Science/Spring2020-Project2-group-2/app')
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
runApp()
runApp()
runApp('../app.page1.Ruozhou')
runApp('../app.page1.Ruozhou')
runApp('../app.page1.Ruozhou')
runApp('../app.page1.Ruozhou')
runApp('../app.page1.Ruozhou')
runApp('../app.page1.Ruozhou')
runApp('../app.page1.Ruozhou')
runApp('../app.page1.Ruozhou')
runApp('../app.page1.Ruozhou')
runApp('../app.page1.Ruozhou')
runApp('../app.page1.Ruozhou')
runApp('../app.page1.Ruozhou')
?updateDateInput
runApp('../app.page1.Ruozhou')
runApp('../app.page1.Ruozhou')
runApp('../app.page1.Ruozhou')
runApp('../app.page1.Ruozhou')
runApp('../app.page1.Ruozhou')
runApp('../app.page1.Ruozhou')
runApp('../app.page1.Ruozhou')
runApp('../app.page1.Ruozhou')
runApp('../app.page1.Ruozhou')
as.Date(1, origin = "1970-01-01")
runApp('../app.page1.Ruozhou')
runApp('../app.page1.Ruozhou')
levels(arrest.cleaned$LAW_CAT_CD)
levels(arrest.cleaned$JURISDICTION_CODE)
unique(arrest.cleaned$JURISDICTION_CODE)
?awesomeIcons
viridis(1)
runApp('../app.page1.Ruozhou')
?fontawesome
runApp('../app.page1.Ruozhou')
unique(arrest.cleaned$JURISDICTION_CODE)
runApp('../app.page1.Ruozhou')
runApp('../app.page1.Ruozhou')
?sidebarMenu
runApp('../app.page1.Ruozhou')
getwd()
